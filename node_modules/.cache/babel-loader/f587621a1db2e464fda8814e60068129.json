{"ast":null,"code":"/*!\n * @pixi/canvas-particles - v5.2.0\n * Compiled Wed, 06 Nov 2019 02:32:43 UTC\n *\n * @pixi/canvas-particles is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { ParticleContainer } from '@pixi/particles';\n/**\n * Renders the object using the Canvas renderer\n * @method renderCanvas\n * @memberof PIXI.ParticleContainer#\n * @private\n * @param {PIXI.CanvasRenderer} renderer - a reference to the canvas renderer\n */\n\nParticleContainer.prototype.renderCanvas = function renderCanvas(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable) {\n    return;\n  }\n\n  var context = renderer.context;\n  var transform = this.worldTransform;\n  var isRotated = true;\n  var positionX = 0;\n  var positionY = 0;\n  var finalWidth = 0;\n  var finalHeight = 0;\n  renderer.setBlendMode(this.blendMode);\n  context.globalAlpha = this.worldAlpha;\n  this.displayObjectUpdateTransform();\n\n  for (var i = 0; i < this.children.length; ++i) {\n    var child = this.children[i];\n\n    if (!child.visible) {\n      continue;\n    }\n\n    var frame = child._texture.frame;\n    context.globalAlpha = this.worldAlpha * child.alpha;\n\n    if (child.rotation % (Math.PI * 2) === 0) {\n      // this is the fastest  way to optimise! - if rotation is 0 then we can avoid any kind of setTransform call\n      if (isRotated) {\n        context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx * renderer.resolution, transform.ty * renderer.resolution);\n        isRotated = false;\n      }\n\n      positionX = child.anchor.x * (-frame.width * child.scale.x) + child.position.x + 0.5;\n      positionY = child.anchor.y * (-frame.height * child.scale.y) + child.position.y + 0.5;\n      finalWidth = frame.width * child.scale.x;\n      finalHeight = frame.height * child.scale.y;\n    } else {\n      if (!isRotated) {\n        isRotated = true;\n      }\n\n      child.displayObjectUpdateTransform();\n      var childTransform = child.worldTransform;\n\n      if (this.roundPixels) {\n        context.setTransform(childTransform.a, childTransform.b, childTransform.c, childTransform.d, childTransform.tx * renderer.resolution | 0, childTransform.ty * renderer.resolution | 0);\n      } else {\n        context.setTransform(childTransform.a, childTransform.b, childTransform.c, childTransform.d, childTransform.tx * renderer.resolution, childTransform.ty * renderer.resolution);\n      }\n\n      positionX = child.anchor.x * -frame.width + 0.5;\n      positionY = child.anchor.y * -frame.height + 0.5;\n      finalWidth = frame.width;\n      finalHeight = frame.height;\n    }\n\n    var resolution = child._texture.baseTexture.resolution;\n    context.drawImage(child._texture.baseTexture.source, frame.x * resolution, frame.y * resolution, frame.width * resolution, frame.height * resolution, positionX * renderer.resolution, positionY * renderer.resolution, finalWidth * renderer.resolution, finalHeight * renderer.resolution);\n  }\n};","map":{"version":3,"sources":["../src/ParticleContainer.js"],"names":["const","let"],"mappings":"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","sourcesContent":["import { ParticleContainer } from '@pixi/particles';\n\n/**\n * Renders the object using the Canvas renderer\n * @method renderCanvas\n * @memberof PIXI.ParticleContainer#\n * @private\n * @param {PIXI.CanvasRenderer} renderer - a reference to the canvas renderer\n */\nParticleContainer.prototype.renderCanvas = function renderCanvas(renderer)\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable)\n    {\n        return;\n    }\n\n    const context = renderer.context;\n    const transform = this.worldTransform;\n    let isRotated = true;\n\n    let positionX = 0;\n    let positionY = 0;\n\n    let finalWidth = 0;\n    let finalHeight = 0;\n\n    renderer.setBlendMode(this.blendMode);\n\n    context.globalAlpha = this.worldAlpha;\n\n    this.displayObjectUpdateTransform();\n\n    for (let i = 0; i < this.children.length; ++i)\n    {\n        const child = this.children[i];\n\n        if (!child.visible)\n        {\n            continue;\n        }\n\n        const frame = child._texture.frame;\n\n        context.globalAlpha = this.worldAlpha * child.alpha;\n\n        if (child.rotation % (Math.PI * 2) === 0)\n        {\n            // this is the fastest  way to optimise! - if rotation is 0 then we can avoid any kind of setTransform call\n            if (isRotated)\n            {\n                context.setTransform(\n                    transform.a,\n                    transform.b,\n                    transform.c,\n                    transform.d,\n                    transform.tx * renderer.resolution,\n                    transform.ty * renderer.resolution\n                );\n\n                isRotated = false;\n            }\n\n            positionX = ((child.anchor.x) * (-frame.width * child.scale.x)) + child.position.x + 0.5;\n            positionY = ((child.anchor.y) * (-frame.height * child.scale.y)) + child.position.y + 0.5;\n\n            finalWidth = frame.width * child.scale.x;\n            finalHeight = frame.height * child.scale.y;\n        }\n        else\n        {\n            if (!isRotated)\n            {\n                isRotated = true;\n            }\n\n            child.displayObjectUpdateTransform();\n\n            const childTransform = child.worldTransform;\n\n            if (this.roundPixels)\n            {\n                context.setTransform(\n                    childTransform.a,\n                    childTransform.b,\n                    childTransform.c,\n                    childTransform.d,\n                    (childTransform.tx * renderer.resolution) | 0,\n                    (childTransform.ty * renderer.resolution) | 0\n                );\n            }\n            else\n            {\n                context.setTransform(\n                    childTransform.a,\n                    childTransform.b,\n                    childTransform.c,\n                    childTransform.d,\n                    childTransform.tx * renderer.resolution,\n                    childTransform.ty * renderer.resolution\n                );\n            }\n\n            positionX = ((child.anchor.x) * (-frame.width)) + 0.5;\n            positionY = ((child.anchor.y) * (-frame.height)) + 0.5;\n\n            finalWidth = frame.width;\n            finalHeight = frame.height;\n        }\n\n        const resolution = child._texture.baseTexture.resolution;\n\n        context.drawImage(\n            child._texture.baseTexture.source,\n            frame.x * resolution,\n            frame.y * resolution,\n            frame.width * resolution,\n            frame.height * resolution,\n            positionX * renderer.resolution,\n            positionY * renderer.resolution,\n            finalWidth * renderer.resolution,\n            finalHeight * renderer.resolution\n        );\n    }\n};\n"]},"metadata":{},"sourceType":"module"}