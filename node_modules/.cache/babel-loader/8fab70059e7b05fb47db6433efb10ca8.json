{"ast":null,"code":"/*!\n * @pixi/canvas-prepare - v5.2.0\n * Compiled Wed, 06 Nov 2019 02:32:43 UTC\n *\n * @pixi/canvas-prepare is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { BaseTexture } from '@pixi/core';\nimport { BasePrepare } from '@pixi/prepare';\nvar CANVAS_START_SIZE = 16;\n/**\n * The prepare manager provides functionality to upload content to the GPU.\n *\n * This cannot be done directly for Canvas like in WebGL, but the effect can be achieved by drawing\n * textures to an offline canvas. This draw call will force the texture to be moved onto the GPU.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.prepare`\n *\n * @class\n * @extends PIXI.prepare.BasePrepare\n * @memberof PIXI.prepare\n */\n\nvar CanvasPrepare =\n/*@__PURE__*/\nfunction (BasePrepare) {\n  function CanvasPrepare(renderer) {\n    BasePrepare.call(this, renderer);\n    this.uploadHookHelper = this;\n    /**\n    * An offline canvas to render textures to\n    * @type {HTMLCanvasElement}\n    * @private\n    */\n\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = CANVAS_START_SIZE;\n    this.canvas.height = CANVAS_START_SIZE;\n    /**\n     * The context to the canvas\n    * @type {CanvasRenderingContext2D}\n    * @private\n    */\n\n    this.ctx = this.canvas.getContext('2d'); // Add textures to upload\n\n    this.registerUploadHook(uploadBaseTextures);\n  }\n\n  if (BasePrepare) CanvasPrepare.__proto__ = BasePrepare;\n  CanvasPrepare.prototype = Object.create(BasePrepare && BasePrepare.prototype);\n  CanvasPrepare.prototype.constructor = CanvasPrepare;\n  /**\n   * Destroys the plugin, don't use after this.\n   *\n   */\n\n  CanvasPrepare.prototype.destroy = function destroy() {\n    BasePrepare.prototype.destroy.call(this);\n    this.ctx = null;\n    this.canvas = null;\n  };\n\n  return CanvasPrepare;\n}(BasePrepare);\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param {*} prepare - Instance of CanvasPrepare\n * @param {*} item - Item to check\n * @return {boolean} If item was uploaded.\n */\n\n\nfunction uploadBaseTextures(prepare, item) {\n  if (item instanceof BaseTexture) {\n    var image = item.source; // Sometimes images (like atlas images) report a size of zero, causing errors on windows phone.\n    // So if the width or height is equal to zero then use the canvas size\n    // Otherwise use whatever is smaller, the image dimensions or the canvas dimensions.\n\n    var imageWidth = image.width === 0 ? prepare.canvas.width : Math.min(prepare.canvas.width, image.width);\n    var imageHeight = image.height === 0 ? prepare.canvas.height : Math.min(prepare.canvas.height, image.height); // Only a small subsections is required to be drawn to have the whole texture uploaded to the GPU\n    // A smaller draw can be faster.\n\n    prepare.ctx.drawImage(image, 0, 0, imageWidth, imageHeight, 0, 0, prepare.canvas.width, prepare.canvas.height);\n    return true;\n  }\n\n  return false;\n}\n\nexport { CanvasPrepare };","map":{"version":3,"sources":["../src/CanvasPrepare.js"],"names":["const","super"],"mappings":";;;;;;;;;AAGAA,IAAM,iBAAiB,GAAG,EAA1BA;;;;;;;;;;;;;;AAcA,IAAa,aAAa;AAAA;AAAA,UAAA,WAAA,EAAA;AAKtB,WAAA,aAAA,CAAY,QAAZ,EACA;AACIC,IAAAA,WAAAA,CAAAA,IAAAA,CAAK,IAALA,EAAM,QAANA;AAEA,SAAK,gBAAL,GAAwB,IAAxB;;;;;;;AAOA,SAAK,MAAL,GAAc,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAd;AACA,SAAK,MAAL,CAAY,KAAZ,GAAoB,iBAApB;AACA,SAAK,MAAL,CAAY,MAAZ,GAAqB,iBAArB;;;;;;;AAOA,SAAK,GAAL,GAAW,KAAK,MAAL,CAAY,UAAZ,CAAuB,IAAvB,CAAX,CAnBJ,C;;AAsBI,SAAK,kBAAL,CAAwB,kBAAxB;;;;;wCACH,a;;;;;;0BAMD,O,GAAA,SAAA,OAAA,GACA;AACIA,IAAAA,WAAAA,CAAAA,SAAAA,CAAM,OAANA,CAAM,IAANA,CAAa,IAAbA;AACA,SAAK,GAAL,GAAW,IAAX;AACA,SAAK,MAAL,GAAc,IAAd;AACH,G;;;CAxCqB,CAAS,WAAT,CAA1B;;;;;;;;;;;AAmDA,SAAS,kBAAT,CAA4B,OAA5B,EAAqC,IAArC,EACA;AACI,MAAI,IAAI,YAAY,WAApB,EACA;AACID,QAAM,KAAK,GAAG,IAAI,CAAC,MAAnBA,CADJ,C;;;;AAMIA,QAAM,UAAU,GAAG,KAAK,CAAC,KAAN,KAAgB,CAAhB,GAAoB,OAAO,CAAC,MAAR,CAAe,KAAnC,GAA2C,IAAI,CAAC,GAAL,CAAS,OAAO,CAAC,MAAR,CAAe,KAAxB,EAA+B,KAAK,CAAC,KAArC,CAA9DA;AACAA,QAAM,WAAW,GAAG,KAAK,CAAC,MAAN,KAAiB,CAAjB,GAAqB,OAAO,CAAC,MAAR,CAAe,MAApC,GAA6C,IAAI,CAAC,GAAL,CAAS,OAAO,CAAC,MAAR,CAAe,MAAxB,EAAgC,KAAK,CAAC,MAAtC,CAAjEA,CAPJ,C;;;AAWI,IAAA,OAAO,CAAC,GAAR,CAAY,SAAZ,CAAsB,KAAtB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,UAAnC,EAA+C,WAA/C,EAA4D,CAA5D,EAA+D,CAA/D,EAAkE,OAAO,CAAC,MAAR,CAAe,KAAjF,EAAwF,OAAO,CAAC,MAAR,CAAe,MAAvG;AAEA,WAAO,IAAP;AACH;;AAED,SAAO,KAAP;AACH","sourcesContent":["import { BaseTexture } from '@pixi/core';\nimport { BasePrepare } from '@pixi/prepare';\n\nconst CANVAS_START_SIZE = 16;\n\n/**\n * The prepare manager provides functionality to upload content to the GPU.\n *\n * This cannot be done directly for Canvas like in WebGL, but the effect can be achieved by drawing\n * textures to an offline canvas. This draw call will force the texture to be moved onto the GPU.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.prepare`\n *\n * @class\n * @extends PIXI.prepare.BasePrepare\n * @memberof PIXI.prepare\n */\nexport class CanvasPrepare extends BasePrepare\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        this.uploadHookHelper = this;\n\n        /**\n        * An offline canvas to render textures to\n        * @type {HTMLCanvasElement}\n        * @private\n        */\n        this.canvas = document.createElement('canvas');\n        this.canvas.width = CANVAS_START_SIZE;\n        this.canvas.height = CANVAS_START_SIZE;\n\n        /**\n         * The context to the canvas\n        * @type {CanvasRenderingContext2D}\n        * @private\n        */\n        this.ctx = this.canvas.getContext('2d');\n\n        // Add textures to upload\n        this.registerUploadHook(uploadBaseTextures);\n    }\n\n    /**\n     * Destroys the plugin, don't use after this.\n     *\n     */\n    destroy()\n    {\n        super.destroy();\n        this.ctx = null;\n        this.canvas = null;\n    }\n}\n\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param {*} prepare - Instance of CanvasPrepare\n * @param {*} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction uploadBaseTextures(prepare, item)\n{\n    if (item instanceof BaseTexture)\n    {\n        const image = item.source;\n\n        // Sometimes images (like atlas images) report a size of zero, causing errors on windows phone.\n        // So if the width or height is equal to zero then use the canvas size\n        // Otherwise use whatever is smaller, the image dimensions or the canvas dimensions.\n        const imageWidth = image.width === 0 ? prepare.canvas.width : Math.min(prepare.canvas.width, image.width);\n        const imageHeight = image.height === 0 ? prepare.canvas.height : Math.min(prepare.canvas.height, image.height);\n\n        // Only a small subsections is required to be drawn to have the whole texture uploaded to the GPU\n        // A smaller draw can be faster.\n        prepare.ctx.drawImage(image, 0, 0, imageWidth, imageHeight, 0, 0, prepare.canvas.width, prepare.canvas.height);\n\n        return true;\n    }\n\n    return false;\n}\n"]},"metadata":{},"sourceType":"module"}