{"ast":null,"code":"import _slicedToArray from \"/Users/shs/Desktop/findseung2/portfolio-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/shs/Desktop/findseung2/portfolio-app/src/components/Home.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../css/Home.scss\";\nimport Grid from \"@material-ui/core/Grid\";\nvar canvas;\nvar context;\nvar screenH = window.innerHeight;\n;\nvar screenW;\nvar stars = [];\nvar fps = 50;\nvar numStars = 2000; // Calculate the screen size\n\nscreenH = window.innerHeight;\nscreenW = window.innerWidth; // Get the canvas\n\ncanvas = $('#space'); // Fill out the canvas\n\ncanvas.attr('height', screenH);\ncanvas.attr('width', screenW);\ncontext = canvas[0].getContext('2d'); // Create all the stars\n\nfor (var i = 0; i < numStars; i++) {\n  var x = Math.round(Math.random() * screenW);\n  var y = Math.round(Math.random() * screenH);\n  var length = 1 + Math.random() * 2;\n  var opacity = Math.random(); // Create a new star and draw\n\n  var star = new Star(x, y, length, opacity); // Add the the stars array\n\n  stars.push(star);\n}\n\nsetInterval(animate, 1000 / fps);\n/**\n * Animate the canvas\n */\n\nfunction animate() {\n  context.clearRect(0, 0, screenW, screenH);\n  $.each(stars, function () {\n    this.draw(context);\n  });\n}\n/**\n * Star\n * \n * @param int x\n * @param int y\n * @param int length\n * @param opacity\n */\n\n\nfunction Star(x, y, length, opacity) {\n  this.x = parseInt(x);\n  this.y = parseInt(y);\n  this.length = parseInt(length);\n  this.opacity = opacity;\n  this.factor = 1;\n  this.increment = Math.random() * .03;\n}\n/**\n * Draw a star\n * \n * This function draws a start.\n * You need to give the contaxt as a parameter \n * \n * @param context\n */\n\n\nStar.prototype.draw = function () {\n  context.rotate(Math.PI * 1 / 10); // Save the context\n\n  context.save(); // move into the middle of the canvas, just to make room\n\n  context.translate(this.x, this.y); // Change the opacity\n\n  if (this.opacity > 1) {\n    this.factor = -1;\n  } else if (this.opacity <= 0) {\n    this.factor = 1;\n    this.x = Math.round(Math.random() * screenW);\n    this.y = Math.round(Math.random() * screenH);\n  }\n\n  this.opacity += this.increment * this.factor;\n  context.beginPath();\n\n  for (var i = 5; i--;) {\n    context.lineTo(0, this.length);\n    context.translate(0, this.length);\n    context.rotate(Math.PI * 2 / 10);\n    context.lineTo(0, -this.length);\n    context.translate(0, -this.length);\n    context.rotate(-(Math.PI * 6 / 10));\n  }\n\n  context.lineTo(0, this.length);\n  context.closePath();\n  context.fillStyle = \"rgba(255, 255, 200, \" + this.opacity + \")\";\n  context.shadowBlur = 5;\n  context.shadowColor = '#ffff33';\n  context.fill();\n  context.restore();\n};\n\nfunction Home() {\n  // const [homeTitle2] = useState(\"   Hello, I’m a JavaScript Developer.     \");\n  const _useState = useState(\"Hello, I’m Hyunseung Seok.\"),\n        _useState2 = _slicedToArray(_useState, 1),\n        homeTitle = _useState2[0];\n\n  const _useState3 = useState(\"I’m a JavaScript Developer.\"),\n        _useState4 = _slicedToArray(_useState3, 1),\n        homeTitle2 = _useState4[0]; // const [title, setTitle] = useState('');\n  // const [index, setIndex] = useState(0);\n  // const [state, setState] = useState(true);\n\n\n  useEffect(() => {//     setInterval(() => {\n    //         if(index === homeTitle.length+1){\n    //             setState(false);\n    //         }\n    //         else if(index === -1){\n    //             setState(true);\n    //         }\n    //         if(state){\n    //             setIndex(index + 1);\n    //             setTitle(title + homeTitle[index]);\n    //         }\n    //         else{\n    //             setIndex(index - 1);\n    //             setTitle(title.substr(0, index));\n    //         }\n    //     }, 1000)\n  });\n  return React.createElement(\"div\", {\n    id: \"home\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12,\n    md: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"font-bold\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \"Hello, I\\u2019m \", React.createElement(\"span\", {\n    className: \"font-color-pink\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \"Hyunseung Seok\"), \".\"), React.createElement(\"div\", {\n    className: \"font-bold\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \"JavaScript Developer.\"))));\n} // interface Props {}\n// interface State {\n//     title : string;\n// }\n// class Home extends React.Component<Props, State> {\n//     state: State = {\n//         title: \"\"\n//     };\n//     onChange = () : void => {\n//         setInterval(() => {\n//             if(index === HOMETEXT_len){\n//                 TEXTSTATE = false;\n//             }\n//             else if(index === -1){\n//                 TEXTSTATE = true;\n//                 index++;\n//             }\n//             if(TEXTSTATE){\n//                 home_text += HOMETEXT[index++];\n//             }\n//             else{\n//                 home_text = home_text.substr(0, --index);\n//             }\n//             this.setState({title : home_text});\n//         }, time)\n//     }\n//     render() {\n//         return (\n//             <div id=\"home\">\n//                 <span>{this.onChange}</span>\n//                 <span>{this.state.title}</span>\n//                 <div><button onClick={this.onChange}>button</button></div>\n//             </div>\n//         )\n//     }\n// }\n\n\nexport default Home;","map":{"version":3,"sources":["/Users/shs/Desktop/findseung2/portfolio-app/src/components/Home.tsx"],"names":["React","useState","useEffect","Grid","canvas","context","screenH","window","innerHeight","screenW","stars","fps","numStars","innerWidth","$","attr","getContext","i","x","Math","round","random","y","length","opacity","star","Star","push","setInterval","animate","clearRect","each","draw","parseInt","factor","increment","prototype","rotate","PI","save","translate","beginPath","lineTo","closePath","fillStyle","shadowBlur","shadowColor","fill","restore","Home","homeTitle","homeTitle2"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../css/Home.scss\";\nimport Grid from \"@material-ui/core/Grid\";\n\nvar canvas : any;\nvar context : any;\nvar screenH : any = window.innerHeight;;\nvar screenW : any;\nvar stars :any = [];\nvar fps = 50;\nvar numStars = 2000;\n\n  // Calculate the screen size\n\n\tscreenH = window.innerHeight;\n\tscreenW = window.innerWidth;\n\t\n\t// Get the canvas\n\tcanvas = $('#space');\n\t\n\t// Fill out the canvas\n\tcanvas.attr('height', screenH);\n\tcanvas.attr('width', screenW);\n\tcontext = canvas[0].getContext('2d');\n\t\n\t// Create all the stars\n\tfor(var i = 0; i < numStars; i++) {\n\t\tvar x = Math.round(Math.random() * screenW);\n\t\tvar y = Math.round(Math.random() * screenH);\n\t\tvar length = 1 + Math.random() * 2;\n\t\tvar opacity = Math.random();\n\t\t\n\t\t// Create a new star and draw\n\t\tvar star = new Star(x, y, length, opacity);\n\t\t\n\t\t// Add the the stars array\n\t\tstars.push(star);\n\t}\n\t\n\tsetInterval(animate, 1000 / fps);\n\n/**\n * Animate the canvas\n */\nfunction animate() {\n\tcontext.clearRect(0, 0, screenW, screenH);\n\t$.each(stars, function() {\n\t\tthis.draw(context);\n\t})\n}\n\n/**\n * Star\n * \n * @param int x\n * @param int y\n * @param int length\n * @param opacity\n */\nfunction Star(x, y, length, opacity) {\n\tthis.x = parseInt(x);\n\tthis.y = parseInt(y);\n\tthis.length = parseInt(length);\n\tthis.opacity = opacity;\n\tthis.factor = 1;\n\tthis.increment = Math.random() * .03;\n}\n\n/**\n * Draw a star\n * \n * This function draws a start.\n * You need to give the contaxt as a parameter \n * \n * @param context\n */\nStar.prototype.draw = function() {\n\tcontext.rotate((Math.PI * 1 / 10));\n\t\n\t// Save the context\n\tcontext.save();\n\t\n\t// move into the middle of the canvas, just to make room\n\tcontext.translate(this.x, this.y);\n\t\n\t// Change the opacity\n\tif(this.opacity > 1) {\n\t\tthis.factor = -1;\n\t}\n\telse if(this.opacity <= 0) {\n\t\tthis.factor = 1;\n\t\t\n\t\tthis.x = Math.round(Math.random() * screenW);\n\t\tthis.y = Math.round(Math.random() * screenH);\n\t}\n\t\t\n\tthis.opacity += this.increment * this.factor;\n\t\n\tcontext.beginPath()\n\tfor (var i = 5; i--;) {\n\t\tcontext.lineTo(0, this.length);\n\t\tcontext.translate(0, this.length);\n\t\tcontext.rotate((Math.PI * 2 / 10));\n\t\tcontext.lineTo(0, - this.length);\n\t\tcontext.translate(0, - this.length);\n\t\tcontext.rotate(-(Math.PI * 6 / 10));\n\t}\n\tcontext.lineTo(0, this.length);\n\tcontext.closePath();\n\tcontext.fillStyle = \"rgba(255, 255, 200, \" + this.opacity + \")\";\n\tcontext.shadowBlur = 5;\n\tcontext.shadowColor = '#ffff33';\n\tcontext.fill();\n\t\n\tcontext.restore();\n}\n\n\n\nfunction Home() {\n  // const [homeTitle2] = useState(\"   Hello, I’m a JavaScript Developer.     \");\n  const [homeTitle] = useState(\"Hello, I’m Hyunseung Seok.\");\n  const [homeTitle2] = useState(\"I’m a JavaScript Developer.\");\n  // const [title, setTitle] = useState('');\n  // const [index, setIndex] = useState(0);\n  // const [state, setState] = useState(true);\n\n  useEffect(() => {\n    //     setInterval(() => {\n    //         if(index === homeTitle.length+1){\n    //             setState(false);\n    //         }\n    //         else if(index === -1){\n    //             setState(true);\n    //         }\n    //         if(state){\n    //             setIndex(index + 1);\n    //             setTitle(title + homeTitle[index]);\n    //         }\n    //         else{\n    //             setIndex(index - 1);\n    //             setTitle(title.substr(0, index));\n    //         }\n    //     }, 1000)\n  });\n\n  return (\n    <div id=\"home\">\n      <Grid item xs={12} sm={12} md={12}>\n        <div className=\"title\">\n          <div className=\"font-bold\">Hello, I’m <span className=\"font-color-pink\">Hyunseung Seok</span>.</div>\n          <div className=\"font-bold\">JavaScript Developer.</div>\n        </div>\n      </Grid>\n    </div>\n  );\n}\n\n// interface Props {}\n// interface State {\n//     title : string;\n// }\n// class Home extends React.Component<Props, State> {\n//     state: State = {\n//         title: \"\"\n//     };\n\n//     onChange = () : void => {\n//         setInterval(() => {\n//             if(index === HOMETEXT_len){\n//                 TEXTSTATE = false;\n//             }\n//             else if(index === -1){\n//                 TEXTSTATE = true;\n//                 index++;\n//             }\n\n//             if(TEXTSTATE){\n//                 home_text += HOMETEXT[index++];\n//             }\n//             else{\n//                 home_text = home_text.substr(0, --index);\n//             }\n//             this.setState({title : home_text});\n//         }, time)\n\n//     }\n\n//     render() {\n//         return (\n//             <div id=\"home\">\n//                 <span>{this.onChange}</span>\n//                 <span>{this.state.title}</span>\n//                 <div><button onClick={this.onChange}>button</button></div>\n\n//             </div>\n//         )\n//     }\n// }\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}