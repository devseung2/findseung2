{"ast":null,"code":"/*!\n * @pixi/canvas-renderer - v5.2.0\n * Compiled Wed, 06 Nov 2019 02:32:43 UTC\n *\n * @pixi/canvas-renderer is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { resources, AbstractRenderer, Renderer, BaseTexture } from '@pixi/core';\nimport { CanvasRenderTarget, sayHello, hex2rgb, rgb2hex } from '@pixi/utils';\nimport { SHAPES } from '@pixi/math';\nimport { BLEND_MODES, SCALE_MODES, RENDERER_TYPE } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\n/**\n * A set of functions used to handle masking.\n *\n * Sprite masking is not supported on the CanvasRenderer.\n *\n * @class\n * @memberof PIXI\n */\n\nvar CanvasMaskManager = function CanvasMaskManager(renderer) {\n  this.renderer = renderer;\n};\n/**\n * This method adds it to the current stack of masks.\n *\n * @param {PIXI.MaskData | PIXI.Graphics} maskData - the maskData that will be pushed\n */\n\n\nCanvasMaskManager.prototype.pushMask = function pushMask(maskData) {\n  var renderer = this.renderer;\n  var maskObject = maskData.isMaskData ? maskData.maskObject : maskData;\n  renderer.context.save();\n  var cacheAlpha = maskObject.alpha;\n  var transform = maskObject.transform.worldTransform;\n  var resolution = renderer.resolution;\n  renderer.context.setTransform(transform.a * resolution, transform.b * resolution, transform.c * resolution, transform.d * resolution, transform.tx * resolution, transform.ty * resolution); // TODO support sprite alpha masks??\n  // lots of effort required. If demand is great enough..\n\n  if (!maskObject._texture) {\n    this.renderGraphicsShape(maskObject);\n    renderer.context.clip();\n  }\n\n  maskData.worldAlpha = cacheAlpha;\n};\n/**\n * Renders a PIXI.Graphics shape.\n *\n * @param {PIXI.Graphics} graphics - The object to render.\n */\n\n\nCanvasMaskManager.prototype.renderGraphicsShape = function renderGraphicsShape(graphics) {\n  var context = this.renderer.context;\n  var graphicsData = graphics.geometry.graphicsData;\n  var len = graphicsData.length;\n\n  if (len === 0) {\n    return;\n  }\n\n  context.beginPath();\n\n  for (var i = 0; i < len; i++) {\n    var data = graphicsData[i];\n    var shape = data.shape;\n\n    if (data.type === SHAPES.POLY) {\n      var points = shape.points;\n      context.moveTo(points[0], points[1]);\n\n      for (var j = 1; j < points.length / 2; j++) {\n        context.lineTo(points[j * 2], points[j * 2 + 1]);\n      } // if the first and last point are the same close the path - much neater :)\n\n\n      if (points[0] === points[points.length - 2] && points[1] === points[points.length - 1]) {\n        context.closePath();\n      }\n    } else if (data.type === SHAPES.RECT) {\n      context.rect(shape.x, shape.y, shape.width, shape.height);\n      context.closePath();\n    } else if (data.type === SHAPES.CIRC) {\n      // TODO - need to be Undefined!\n      context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);\n      context.closePath();\n    } else if (data.type === SHAPES.ELIP) {\n      // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n      var w = shape.width * 2;\n      var h = shape.height * 2;\n      var x = shape.x - w / 2;\n      var y = shape.y - h / 2;\n      var kappa = 0.5522848;\n      var ox = w / 2 * kappa; // control point offset horizontal\n\n      var oy = h / 2 * kappa; // control point offset vertical\n\n      var xe = x + w; // x-end\n\n      var ye = y + h; // y-end\n\n      var xm = x + w / 2; // x-middle\n\n      var ym = y + h / 2; // y-middle\n\n      context.moveTo(x, ym);\n      context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n      context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n      context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n      context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n      context.closePath();\n    } else if (data.type === SHAPES.RREC) {\n      var rx = shape.x;\n      var ry = shape.y;\n      var width = shape.width;\n      var height = shape.height;\n      var radius = shape.radius;\n      var maxRadius = Math.min(width, height) / 2 | 0;\n      radius = radius > maxRadius ? maxRadius : radius;\n      context.moveTo(rx, ry + radius);\n      context.lineTo(rx, ry + height - radius);\n      context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);\n      context.lineTo(rx + width - radius, ry + height);\n      context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);\n      context.lineTo(rx + width, ry + radius);\n      context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);\n      context.lineTo(rx + radius, ry);\n      context.quadraticCurveTo(rx, ry, rx, ry + radius);\n      context.closePath();\n    }\n  }\n};\n/**\n * Restores the current drawing context to the state it was before the mask was applied.\n *\n * @param {PIXI.CanvasRenderer} renderer - The renderer context to use.\n */\n\n\nCanvasMaskManager.prototype.popMask = function popMask(renderer) {\n  renderer.context.restore();\n  renderer.invalidateBlendMode();\n};\n/**\n * Destroys this canvas mask manager.\n *\n */\n\n\nCanvasMaskManager.prototype.destroy = function destroy() {\n  /* empty */\n};\n/**\n * Creates a little colored canvas\n *\n * @ignore\n * @param {string} color - The color to make the canvas\n * @return {canvas} a small canvas element\n */\n\n\nfunction createColoredCanvas(color) {\n  var canvas = document.createElement('canvas');\n  canvas.width = 6;\n  canvas.height = 1;\n  var context = canvas.getContext('2d');\n  context.fillStyle = color;\n  context.fillRect(0, 0, 6, 1);\n  return canvas;\n}\n/**\n * Checks whether the Canvas BlendModes are supported by the current browser\n *\n * @private\n * @return {boolean} whether they are supported\n */\n\n\nfunction canUseNewCanvasBlendModes() {\n  if (typeof document === 'undefined') {\n    return false;\n  }\n\n  var magenta = createColoredCanvas('#ff00ff');\n  var yellow = createColoredCanvas('#ffff00');\n  var canvas = document.createElement('canvas');\n  canvas.width = 6;\n  canvas.height = 1;\n  var context = canvas.getContext('2d');\n  context.globalCompositeOperation = 'multiply';\n  context.drawImage(magenta, 0, 0);\n  context.drawImage(yellow, 2, 0);\n  var imageData = context.getImageData(2, 0, 1, 1);\n\n  if (!imageData) {\n    return false;\n  }\n\n  var data = imageData.data;\n  return data[0] === 255 && data[1] === 0 && data[2] === 0;\n}\n/**\n * Maps blend combinations to Canvas.\n *\n * @memberof PIXI\n * @function mapCanvasBlendModesToPixi\n * @private\n * @param {string[]} [array=[]] - The array to output into.\n * @return {string[]} Mapped modes.\n */\n\n\nfunction mapCanvasBlendModesToPixi(array) {\n  if (array === void 0) array = [];\n\n  if (canUseNewCanvasBlendModes()) {\n    array[BLEND_MODES.NORMAL] = 'source-over';\n    array[BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???\n\n    array[BLEND_MODES.MULTIPLY] = 'multiply';\n    array[BLEND_MODES.SCREEN] = 'screen';\n    array[BLEND_MODES.OVERLAY] = 'overlay';\n    array[BLEND_MODES.DARKEN] = 'darken';\n    array[BLEND_MODES.LIGHTEN] = 'lighten';\n    array[BLEND_MODES.COLOR_DODGE] = 'color-dodge';\n    array[BLEND_MODES.COLOR_BURN] = 'color-burn';\n    array[BLEND_MODES.HARD_LIGHT] = 'hard-light';\n    array[BLEND_MODES.SOFT_LIGHT] = 'soft-light';\n    array[BLEND_MODES.DIFFERENCE] = 'difference';\n    array[BLEND_MODES.EXCLUSION] = 'exclusion';\n    array[BLEND_MODES.HUE] = 'hue';\n    array[BLEND_MODES.SATURATION] = 'saturate';\n    array[BLEND_MODES.COLOR] = 'color';\n    array[BLEND_MODES.LUMINOSITY] = 'luminosity';\n  } else {\n    // this means that the browser does not support the cool new blend modes in canvas 'cough' ie 'cough'\n    array[BLEND_MODES.NORMAL] = 'source-over';\n    array[BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???\n\n    array[BLEND_MODES.MULTIPLY] = 'source-over';\n    array[BLEND_MODES.SCREEN] = 'source-over';\n    array[BLEND_MODES.OVERLAY] = 'source-over';\n    array[BLEND_MODES.DARKEN] = 'source-over';\n    array[BLEND_MODES.LIGHTEN] = 'source-over';\n    array[BLEND_MODES.COLOR_DODGE] = 'source-over';\n    array[BLEND_MODES.COLOR_BURN] = 'source-over';\n    array[BLEND_MODES.HARD_LIGHT] = 'source-over';\n    array[BLEND_MODES.SOFT_LIGHT] = 'source-over';\n    array[BLEND_MODES.DIFFERENCE] = 'source-over';\n    array[BLEND_MODES.EXCLUSION] = 'source-over';\n    array[BLEND_MODES.HUE] = 'source-over';\n    array[BLEND_MODES.SATURATION] = 'source-over';\n    array[BLEND_MODES.COLOR] = 'source-over';\n    array[BLEND_MODES.LUMINOSITY] = 'source-over';\n  } // not-premultiplied, only for webgl\n\n\n  array[BLEND_MODES.NORMAL_NPM] = array[BLEND_MODES.NORMAL];\n  array[BLEND_MODES.ADD_NPM] = array[BLEND_MODES.ADD];\n  array[BLEND_MODES.SCREEN_NPM] = array[BLEND_MODES.SCREEN]; // composite operations\n\n  array[BLEND_MODES.SRC_IN] = 'source-in';\n  array[BLEND_MODES.SRC_OUT] = 'source-out';\n  array[BLEND_MODES.SRC_ATOP] = 'source-atop';\n  array[BLEND_MODES.DST_OVER] = 'destination-over';\n  array[BLEND_MODES.DST_IN] = 'destination-in';\n  array[BLEND_MODES.DST_OUT] = 'destination-out';\n  array[BLEND_MODES.DST_ATOP] = 'destination-atop';\n  array[BLEND_MODES.XOR] = 'xor'; // SUBTRACT from flash, does not exist in canvas\n\n  array[BLEND_MODES.SUBTRACT] = 'source-over';\n  return array;\n}\n/**\n * The CanvasRenderer draws the scene and all its content onto a 2d canvas.\n *\n * This renderer should be used for browsers that do not support WebGL.\n * Don't forget to add the CanvasRenderer.view to your DOM or you will not see anything!\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.AbstractRenderer\n */\n\n\nvar CanvasRenderer =\n/*@__PURE__*/\nfunction (AbstractRenderer) {\n  function CanvasRenderer(options, arg2, arg3) {\n    AbstractRenderer.call(this, 'Canvas', options, arg2, arg3);\n    this.type = RENDERER_TYPE.CANVAS;\n    /**\n     * The root canvas 2d context that everything is drawn with.\n     *\n     * @member {CanvasRenderingContext2D}\n     */\n\n    this.rootContext = this.view.getContext('2d', {\n      alpha: this.transparent\n    });\n    /**\n     * The currently active canvas 2d context (could change with renderTextures)\n     *\n     * @member {CanvasRenderingContext2D}\n     */\n\n    this.context = this.rootContext;\n    /**\n     * Boolean flag controlling canvas refresh.\n     *\n     * @member {boolean}\n     */\n\n    this.refresh = true;\n    /**\n     * Instance of a CanvasMaskManager, handles masking when using the canvas renderer.\n     *\n     * @member {PIXI.CanvasMaskManager}\n     */\n\n    this.maskManager = new CanvasMaskManager(this);\n    /**\n     * The canvas property used to set the canvas smoothing property.\n     *\n     * @member {string}\n     */\n\n    this.smoothProperty = 'imageSmoothingEnabled';\n\n    if (!this.rootContext.imageSmoothingEnabled) {\n      if (this.rootContext.webkitImageSmoothingEnabled) {\n        this.smoothProperty = 'webkitImageSmoothingEnabled';\n      } else if (this.rootContext.mozImageSmoothingEnabled) {\n        this.smoothProperty = 'mozImageSmoothingEnabled';\n      } else if (this.rootContext.oImageSmoothingEnabled) {\n        this.smoothProperty = 'oImageSmoothingEnabled';\n      } else if (this.rootContext.msImageSmoothingEnabled) {\n        this.smoothProperty = 'msImageSmoothingEnabled';\n      }\n    }\n\n    this.initPlugins(CanvasRenderer.__plugins);\n    /**\n     * Tracks the blend modes useful for this renderer.\n     *\n     * @member {object<number, string>}\n     */\n\n    this.blendModes = mapCanvasBlendModesToPixi();\n    this._activeBlendMode = null;\n    this._outerBlend = false;\n    this.renderingToScreen = false;\n    sayHello('Canvas');\n    /**\n     * Fired after rendering finishes.\n     *\n     * @event PIXI.CanvasRenderer#postrender\n     */\n\n    /**\n     * Fired before rendering starts.\n     *\n     * @event PIXI.CanvasRenderer#prerender\n     */\n\n    this.resize(this.options.width, this.options.height);\n  }\n\n  if (AbstractRenderer) CanvasRenderer.__proto__ = AbstractRenderer;\n  CanvasRenderer.prototype = Object.create(AbstractRenderer && AbstractRenderer.prototype);\n  CanvasRenderer.prototype.constructor = CanvasRenderer;\n  /**\n   * Renders the object to this canvas view\n   *\n   * @param {PIXI.DisplayObject} displayObject - The object to be rendered\n   * @param {PIXI.RenderTexture} [renderTexture] - A render texture to be rendered to.\n   *  If unset, it will render to the root context.\n   * @param {boolean} [clear=false] - Whether to clear the canvas before drawing\n   * @param {PIXI.Matrix} [transform] - A transformation to be applied\n   * @param {boolean} [skipUpdateTransform=false] - Whether to skip the update transform\n   */\n\n  CanvasRenderer.prototype.render = function render(displayObject, renderTexture, clear, transform, skipUpdateTransform) {\n    if (!this.view) {\n      return;\n    } // can be handy to know!\n\n\n    this.renderingToScreen = !renderTexture;\n    this.emit('prerender');\n    var rootResolution = this.resolution;\n\n    if (renderTexture) {\n      renderTexture = renderTexture.baseTexture || renderTexture;\n\n      if (!renderTexture._canvasRenderTarget) {\n        renderTexture._canvasRenderTarget = new CanvasRenderTarget(renderTexture.width, renderTexture.height, renderTexture.resolution);\n        renderTexture.resource = new resources.CanvasResource(renderTexture._canvasRenderTarget.canvas);\n        renderTexture.valid = true;\n      }\n\n      this.context = renderTexture._canvasRenderTarget.context;\n      this.resolution = renderTexture._canvasRenderTarget.resolution;\n    } else {\n      this.context = this.rootContext;\n    }\n\n    var context = this.context;\n\n    if (!renderTexture) {\n      this._lastObjectRendered = displayObject;\n    }\n\n    if (!skipUpdateTransform) {\n      // update the scene graph\n      var cacheParent = displayObject.parent;\n      var tempWt = this._tempDisplayObjectParent.transform.worldTransform;\n\n      if (transform) {\n        transform.copyTo(tempWt); // Canvas Renderer doesn't use \"context.translate\"\n        // nor does it store current translation in projectionSystem\n        // we re-calculate all matrices,\n        // its not like CanvasRenderer can survive more than 1000 elements\n\n        displayObject.transform._parentID = -1;\n      } else {\n        // in this case matrix cache in displayObject works like expected\n        tempWt.identity();\n      }\n\n      displayObject.parent = this._tempDisplayObjectParent;\n      displayObject.updateTransform();\n      displayObject.parent = cacheParent;\n\n      if (transform) {\n        // Clear the matrix cache one more time,\n        // we dont have our computations to affect standard \"transform=null\" case\n        displayObject.transform._parentID = -1;\n      } // displayObject.hitArea = //TODO add a temp hit area\n\n    }\n\n    context.save();\n    context.setTransform(1, 0, 0, 1, 0, 0);\n    context.globalAlpha = 1;\n    this._activeBlendMode = BLEND_MODES.NORMAL;\n    this._outerBlend = false;\n    context.globalCompositeOperation = this.blendModes[BLEND_MODES.NORMAL];\n\n    if (clear !== undefined ? clear : this.clearBeforeRender) {\n      if (this.renderingToScreen) {\n        if (this.transparent) {\n          context.clearRect(0, 0, this.width, this.height);\n        } else {\n          context.fillStyle = this._backgroundColorString;\n          context.fillRect(0, 0, this.width, this.height);\n        }\n      } // else {\n      // TODO: implement background for CanvasRenderTarget or RenderTexture?\n      // }\n\n    } // TODO RENDER TARGET STUFF HERE..\n\n\n    var tempContext = this.context;\n    this.context = context;\n    displayObject.renderCanvas(this);\n    this.context = tempContext;\n    context.restore();\n    this.resolution = rootResolution;\n    this.emit('postrender');\n  };\n  /**\n   * Clear the canvas of renderer.\n   *\n   * @param {string} [clearColor] - Clear the canvas with this color, except the canvas is transparent.\n   */\n\n\n  CanvasRenderer.prototype.clear = function clear(clearColor) {\n    var context = this.context;\n    clearColor = clearColor || this._backgroundColorString;\n\n    if (!this.transparent && clearColor) {\n      context.fillStyle = clearColor;\n      context.fillRect(0, 0, this.width, this.height);\n    } else {\n      context.clearRect(0, 0, this.width, this.height);\n    }\n  };\n  /**\n   * Sets the blend mode of the renderer.\n   *\n   * @param {number} blendMode - See {@link PIXI.BLEND_MODES} for valid values.\n   * @param {boolean} [readyForOuterBlend=false] - Some blendModes are dangerous, they affect outer space of sprite.\n   * Pass `true` only if you are ready to use them.\n   */\n\n\n  CanvasRenderer.prototype.setBlendMode = function setBlendMode(blendMode, readyForOuterBlend) {\n    var outerBlend = blendMode === BLEND_MODES.SRC_IN || blendMode === BLEND_MODES.SRC_OUT || blendMode === BLEND_MODES.DST_IN || blendMode === BLEND_MODES.DST_ATOP;\n\n    if (!readyForOuterBlend && outerBlend) {\n      blendMode = BLEND_MODES.NORMAL;\n    }\n\n    if (this._activeBlendMode === blendMode) {\n      return;\n    }\n\n    this._activeBlendMode = blendMode;\n    this._outerBlend = outerBlend;\n    this.context.globalCompositeOperation = this.blendModes[blendMode];\n  };\n  /**\n   * Removes everything from the renderer and optionally removes the Canvas DOM element.\n   *\n   * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n   */\n\n\n  CanvasRenderer.prototype.destroy = function destroy(removeView) {\n    // call the base destroy\n    AbstractRenderer.prototype.destroy.call(this, removeView);\n    this.context = null;\n    this.refresh = true;\n    this.maskManager.destroy();\n    this.maskManager = null;\n    this.smoothProperty = null;\n  };\n  /**\n   * Resizes the canvas view to the specified width and height.\n   *\n   * @extends PIXI.AbstractRenderer#resize\n   *\n   * @param {number} screenWidth - the new width of the screen\n   * @param {number} screenHeight - the new height of the screen\n   */\n\n\n  CanvasRenderer.prototype.resize = function resize(screenWidth, screenHeight) {\n    AbstractRenderer.prototype.resize.call(this, screenWidth, screenHeight); // reset the scale mode.. oddly this seems to be reset when the canvas is resized.\n    // surely a browser bug?? Let PixiJS fix that for you..\n\n    if (this.smoothProperty) {\n      this.rootContext[this.smoothProperty] = settings.SCALE_MODE === SCALE_MODES.LINEAR;\n    }\n  };\n  /**\n   * Checks if blend mode has changed.\n   */\n\n\n  CanvasRenderer.prototype.invalidateBlendMode = function invalidateBlendMode() {\n    this._activeBlendMode = this.blendModes.indexOf(this.context.globalCompositeOperation);\n  };\n  /**\n   * Collection of installed plugins. These are included by default in PIXI, but can be excluded\n   * by creating a custom build. Consult the README for more information about creating custom\n   * builds and excluding plugins.\n   * @name PIXI.CanvasRenderer#plugins\n   * @type {object}\n   * @readonly\n   * @property {PIXI.accessibility.AccessibilityManager} accessibility Support tabbing interactive elements.\n   * @property {PIXI.extract.CanvasExtract} extract Extract image data from renderer.\n   * @property {PIXI.interaction.InteractionManager} interaction Handles mouse, touch and pointer events.\n   * @property {PIXI.prepare.CanvasPrepare} prepare Pre-render display objects.\n   */\n\n  /**\n   * Adds a plugin to the renderer.\n   *\n   * @method\n   * @param {string} pluginName - The name of the plugin.\n   * @param {Function} ctor - The constructor function or class for the plugin.\n   */\n\n\n  CanvasRenderer.registerPlugin = function registerPlugin(pluginName, ctor) {\n    CanvasRenderer.__plugins = CanvasRenderer.__plugins || {};\n    CanvasRenderer.__plugins[pluginName] = ctor;\n  };\n\n  return CanvasRenderer;\n}(AbstractRenderer);\n/**\n * Utility methods for Sprite/Texture tinting.\n *\n * Tinting with the CanvasRenderer involves creating a new canvas to use as a texture,\n * so be aware of the performance implications.\n *\n * @namespace PIXI.canvasUtils\n * @memberof PIXI\n */\n\n\nvar canvasUtils = {\n  /**\n   * Basically this method just needs a sprite and a color and tints the sprite with the given color.\n   *\n   * @memberof PIXI.canvasUtils\n   * @param {PIXI.Sprite} sprite - the sprite to tint\n   * @param {number} color - the color to use to tint the sprite with\n   * @return {HTMLCanvasElement} The tinted canvas\n   */\n  getTintedCanvas: function (sprite, color) {\n    var texture = sprite.texture;\n    color = canvasUtils.roundColor(color);\n    var stringColor = \"#\" + (\"00000\" + (color | 0).toString(16)).substr(-6);\n    texture.tintCache = texture.tintCache || {};\n    var cachedCanvas = texture.tintCache[stringColor];\n    var canvas;\n\n    if (cachedCanvas) {\n      if (cachedCanvas.tintId === texture._updateID) {\n        return texture.tintCache[stringColor];\n      }\n\n      canvas = texture.tintCache[stringColor];\n    } else {\n      canvas = canvasUtils.canvas || document.createElement('canvas');\n    }\n\n    canvasUtils.tintMethod(texture, color, canvas);\n    canvas.tintId = texture._updateID;\n\n    if (canvasUtils.convertTintToImage) {\n      // is this better?\n      var tintImage = new Image();\n      tintImage.src = canvas.toDataURL();\n      texture.tintCache[stringColor] = tintImage;\n    } else {\n      texture.tintCache[stringColor] = canvas; // if we are not converting the texture to an image then we need to lose the reference to the canvas\n\n      canvasUtils.canvas = null;\n    }\n\n    return canvas;\n  },\n\n  /**\n   * Tint a texture using the 'multiply' operation.\n   *\n   * @memberof PIXI.canvasUtils\n   * @param {PIXI.Texture} texture - the texture to tint\n   * @param {number} color - the color to use to tint the sprite with\n   * @param {HTMLCanvasElement} canvas - the current canvas\n   */\n  tintWithMultiply: function (texture, color, canvas) {\n    var context = canvas.getContext('2d');\n\n    var crop = texture._frame.clone();\n\n    var resolution = texture.baseTexture.resolution;\n    crop.x *= resolution;\n    crop.y *= resolution;\n    crop.width *= resolution;\n    crop.height *= resolution;\n    canvas.width = Math.ceil(crop.width);\n    canvas.height = Math.ceil(crop.height);\n    context.save();\n    context.fillStyle = \"#\" + (\"00000\" + (color | 0).toString(16)).substr(-6);\n    context.fillRect(0, 0, crop.width, crop.height);\n    context.globalCompositeOperation = 'multiply';\n    var source = texture.baseTexture.getDrawableSource();\n    context.drawImage(source, crop.x, crop.y, crop.width, crop.height, 0, 0, crop.width, crop.height);\n    context.globalCompositeOperation = 'destination-atop';\n    context.drawImage(source, crop.x, crop.y, crop.width, crop.height, 0, 0, crop.width, crop.height);\n    context.restore();\n  },\n\n  /**\n   * Tint a texture using the 'overlay' operation.\n   *\n   * @memberof PIXI.canvasUtils\n   * @param {PIXI.Texture} texture - the texture to tint\n   * @param {number} color - the color to use to tint the sprite with\n   * @param {HTMLCanvasElement} canvas - the current canvas\n   */\n  tintWithOverlay: function tintWithOverlay(texture, color, canvas) {\n    var context = canvas.getContext('2d');\n\n    var crop = texture._frame.clone();\n\n    var resolution = texture.baseTexture.resolution;\n    crop.x *= resolution;\n    crop.y *= resolution;\n    crop.width *= resolution;\n    crop.height *= resolution;\n    canvas.width = Math.ceil(crop.width);\n    canvas.height = Math.ceil(crop.height);\n    context.save();\n    context.globalCompositeOperation = 'copy';\n    context.fillStyle = \"#\" + (\"00000\" + (color | 0).toString(16)).substr(-6);\n    context.fillRect(0, 0, crop.width, crop.height);\n    context.globalCompositeOperation = 'destination-atop';\n    context.drawImage(texture.baseTexture.getDrawableSource(), crop.x, crop.y, crop.width, crop.height, 0, 0, crop.width, crop.height); // context.globalCompositeOperation = 'copy';\n\n    context.restore();\n  },\n\n  /**\n   * Tint a texture pixel per pixel.\n   *\n   * @memberof PIXI.canvasUtils\n   * @param {PIXI.Texture} texture - the texture to tint\n   * @param {number} color - the color to use to tint the sprite with\n   * @param {HTMLCanvasElement} canvas - the current canvas\n   */\n  tintWithPerPixel: function (texture, color, canvas) {\n    var context = canvas.getContext('2d');\n\n    var crop = texture._frame.clone();\n\n    var resolution = texture.baseTexture.resolution;\n    crop.x *= resolution;\n    crop.y *= resolution;\n    crop.width *= resolution;\n    crop.height *= resolution;\n    canvas.width = Math.ceil(crop.width);\n    canvas.height = Math.ceil(crop.height);\n    context.save();\n    context.globalCompositeOperation = 'copy';\n    context.drawImage(texture.baseTexture.getDrawableSource(), crop.x, crop.y, crop.width, crop.height, 0, 0, crop.width, crop.height);\n    context.restore();\n    var rgbValues = hex2rgb(color);\n    var r = rgbValues[0];\n    var g = rgbValues[1];\n    var b = rgbValues[2];\n    var pixelData = context.getImageData(0, 0, crop.width, crop.height);\n    var pixels = pixelData.data;\n\n    for (var i = 0; i < pixels.length; i += 4) {\n      pixels[i + 0] *= r;\n      pixels[i + 1] *= g;\n      pixels[i + 2] *= b;\n    }\n\n    context.putImageData(pixelData, 0, 0);\n  },\n\n  /**\n   * Rounds the specified color according to the canvasUtils.cacheStepsPerColorChannel.\n   *\n   * @memberof PIXI.canvasUtils\n   * @param {number} color - the color to round, should be a hex color\n   * @return {number} The rounded color.\n   */\n  roundColor: function (color) {\n    var step = canvasUtils.cacheStepsPerColorChannel;\n    var rgbValues = hex2rgb(color);\n    rgbValues[0] = Math.min(255, rgbValues[0] / step * step);\n    rgbValues[1] = Math.min(255, rgbValues[1] / step * step);\n    rgbValues[2] = Math.min(255, rgbValues[2] / step * step);\n    return rgb2hex(rgbValues);\n  },\n\n  /**\n   * Number of steps which will be used as a cap when rounding colors.\n   *\n   * @memberof PIXI.canvasUtils\n   * @type {number}\n   */\n  cacheStepsPerColorChannel: 8,\n\n  /**\n   * Tint cache boolean flag.\n   *\n   * @memberof PIXI.canvasUtils\n   * @type {boolean}\n   */\n  convertTintToImage: false,\n\n  /**\n   * Whether or not the Canvas BlendModes are supported, consequently the ability to tint using the multiply method.\n   *\n   * @memberof PIXI.canvasUtils\n   * @type {boolean}\n   */\n  canUseMultiply: canUseNewCanvasBlendModes(),\n\n  /**\n   * The tinting method that will be used.\n   *\n   * @memberof PIXI.canvasUtils\n   * @type {Function}\n   */\n  tintMethod: function () {// jslint-disable no-empty-function\n  }\n};\ncanvasUtils.tintMethod = canvasUtils.canUseMultiply ? canvasUtils.tintWithMultiply : canvasUtils.tintWithPerPixel; // Reference to Renderer.create static function\n\nvar parentCreate = Renderer.create;\n/**\n * Override the Renderer.create to fallback to use CanvasRenderer.\n * Also supports forceCanvas option with Application or autoDetectRenderer.\n * @private\n */\n\nRenderer.create = function create(options) {\n  var forceCanvas = options && options.forceCanvas;\n\n  if (!forceCanvas) {\n    try {\n      return parentCreate(options);\n    } catch (err) {// swallow WebGL-unsupported error\n    }\n  }\n\n  return new CanvasRenderer(options);\n};\n/**\n * Get the drawable source, such as HTMLCanvasElement or HTMLImageElement suitable\n * for rendering with CanvasRenderer. Provided by **@pixi/canvas-renderer** package.\n * @method getDrawableSource\n * @memberof PIXI.BaseTexture#\n * @return {PIXI.ICanvasImageSource} Source to render with CanvasRenderer\n */\n\n\nBaseTexture.prototype.getDrawableSource = function getDrawableSource() {\n  var resource = this.resource;\n  return resource ? resource.bitmap || resource.source : this.source;\n};\n\nexport { CanvasRenderer, canUseNewCanvasBlendModes, canvasUtils };","map":{"version":3,"sources":["../src/utils/CanvasMaskManager.js","../src/utils/canUseNewCanvasBlendModes.js","../src/utils/mapCanvasBlendModesToPixi.js","../src/CanvasRenderer.js","../src/canvasUtils.js","../src/Renderer.js","../src/BaseTexture.js"],"names":["const","let","super"],"mappings":"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","sourcesContent":["import { SHAPES } from '@pixi/math';\n\n/**\n * A set of functions used to handle masking.\n *\n * Sprite masking is not supported on the CanvasRenderer.\n *\n * @class\n * @memberof PIXI\n */\nexport class CanvasMaskManager\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - The canvas renderer.\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * This method adds it to the current stack of masks.\n     *\n     * @param {PIXI.MaskData | PIXI.Graphics} maskData - the maskData that will be pushed\n     */\n    pushMask(maskData)\n    {\n        const renderer = this.renderer;\n        const maskObject = maskData.isMaskData ? maskData.maskObject : maskData;\n\n        renderer.context.save();\n\n        const cacheAlpha = maskObject.alpha;\n        const transform = maskObject.transform.worldTransform;\n        const resolution = renderer.resolution;\n\n        renderer.context.setTransform(\n            transform.a * resolution,\n            transform.b * resolution,\n            transform.c * resolution,\n            transform.d * resolution,\n            transform.tx * resolution,\n            transform.ty * resolution\n        );\n\n        // TODO support sprite alpha masks??\n        // lots of effort required. If demand is great enough..\n        if (!maskObject._texture)\n        {\n            this.renderGraphicsShape(maskObject);\n            renderer.context.clip();\n        }\n\n        maskData.worldAlpha = cacheAlpha;\n    }\n\n    /**\n     * Renders a PIXI.Graphics shape.\n     *\n     * @param {PIXI.Graphics} graphics - The object to render.\n     */\n    renderGraphicsShape(graphics)\n    {\n        const context = this.renderer.context;\n        const graphicsData = graphics.geometry.graphicsData;\n        const len = graphicsData.length;\n\n        if (len === 0)\n        {\n            return;\n        }\n\n        context.beginPath();\n\n        for (let i = 0; i < len; i++)\n        {\n            const data = graphicsData[i];\n            const shape = data.shape;\n\n            if (data.type === SHAPES.POLY)\n            {\n                const points = shape.points;\n\n                context.moveTo(points[0], points[1]);\n\n                for (let j = 1; j < points.length / 2; j++)\n                {\n                    context.lineTo(points[j * 2], points[(j * 2) + 1]);\n                }\n\n                // if the first and last point are the same close the path - much neater :)\n                if (points[0] === points[points.length - 2] && points[1] === points[points.length - 1])\n                {\n                    context.closePath();\n                }\n            }\n            else if (data.type === SHAPES.RECT)\n            {\n                context.rect(shape.x, shape.y, shape.width, shape.height);\n                context.closePath();\n            }\n            else if (data.type === SHAPES.CIRC)\n            {\n                // TODO - need to be Undefined!\n                context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);\n                context.closePath();\n            }\n            else if (data.type === SHAPES.ELIP)\n            {\n                // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n\n                const w = shape.width * 2;\n                const h = shape.height * 2;\n\n                const x = shape.x - (w / 2);\n                const y = shape.y - (h / 2);\n\n                const kappa = 0.5522848;\n                const ox = (w / 2) * kappa; // control point offset horizontal\n                const oy = (h / 2) * kappa; // control point offset vertical\n                const xe = x + w; // x-end\n                const ye = y + h; // y-end\n                const xm = x + (w / 2); // x-middle\n                const ym = y + (h / 2); // y-middle\n\n                context.moveTo(x, ym);\n                context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n                context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n                context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n                context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n                context.closePath();\n            }\n            else if (data.type === SHAPES.RREC)\n            {\n                const rx = shape.x;\n                const ry = shape.y;\n                const width = shape.width;\n                const height = shape.height;\n                let radius = shape.radius;\n\n                const maxRadius = Math.min(width, height) / 2 | 0;\n\n                radius = radius > maxRadius ? maxRadius : radius;\n\n                context.moveTo(rx, ry + radius);\n                context.lineTo(rx, ry + height - radius);\n                context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);\n                context.lineTo(rx + width - radius, ry + height);\n                context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);\n                context.lineTo(rx + width, ry + radius);\n                context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);\n                context.lineTo(rx + radius, ry);\n                context.quadraticCurveTo(rx, ry, rx, ry + radius);\n                context.closePath();\n            }\n        }\n    }\n\n    /**\n     * Restores the current drawing context to the state it was before the mask was applied.\n     *\n     * @param {PIXI.CanvasRenderer} renderer - The renderer context to use.\n     */\n    popMask(renderer)\n    {\n        renderer.context.restore();\n        renderer.invalidateBlendMode();\n    }\n\n    /**\n     * Destroys this canvas mask manager.\n     *\n     */\n    destroy()\n    {\n        /* empty */\n    }\n}\n","/**\n * Creates a little colored canvas\n *\n * @ignore\n * @param {string} color - The color to make the canvas\n * @return {canvas} a small canvas element\n */\nfunction createColoredCanvas(color)\n{\n    const canvas = document.createElement('canvas');\n\n    canvas.width = 6;\n    canvas.height = 1;\n\n    const context = canvas.getContext('2d');\n\n    context.fillStyle = color;\n    context.fillRect(0, 0, 6, 1);\n\n    return canvas;\n}\n\n/**\n * Checks whether the Canvas BlendModes are supported by the current browser\n *\n * @private\n * @return {boolean} whether they are supported\n */\nexport function canUseNewCanvasBlendModes()\n{\n    if (typeof document === 'undefined')\n    {\n        return false;\n    }\n\n    const magenta = createColoredCanvas('#ff00ff');\n    const yellow = createColoredCanvas('#ffff00');\n\n    const canvas = document.createElement('canvas');\n\n    canvas.width = 6;\n    canvas.height = 1;\n\n    const context = canvas.getContext('2d');\n\n    context.globalCompositeOperation = 'multiply';\n    context.drawImage(magenta, 0, 0);\n    context.drawImage(yellow, 2, 0);\n\n    const imageData = context.getImageData(2, 0, 1, 1);\n\n    if (!imageData)\n    {\n        return false;\n    }\n\n    const data = imageData.data;\n\n    return (data[0] === 255 && data[1] === 0 && data[2] === 0);\n}\n","import { BLEND_MODES } from '@pixi/constants';\nimport { canUseNewCanvasBlendModes } from './canUseNewCanvasBlendModes';\n\n/**\n * Maps blend combinations to Canvas.\n *\n * @memberof PIXI\n * @function mapCanvasBlendModesToPixi\n * @private\n * @param {string[]} [array=[]] - The array to output into.\n * @return {string[]} Mapped modes.\n */\nexport function mapCanvasBlendModesToPixi(array = [])\n{\n    if (canUseNewCanvasBlendModes())\n    {\n        array[BLEND_MODES.NORMAL] = 'source-over';\n        array[BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???\n        array[BLEND_MODES.MULTIPLY] = 'multiply';\n        array[BLEND_MODES.SCREEN] = 'screen';\n        array[BLEND_MODES.OVERLAY] = 'overlay';\n        array[BLEND_MODES.DARKEN] = 'darken';\n        array[BLEND_MODES.LIGHTEN] = 'lighten';\n        array[BLEND_MODES.COLOR_DODGE] = 'color-dodge';\n        array[BLEND_MODES.COLOR_BURN] = 'color-burn';\n        array[BLEND_MODES.HARD_LIGHT] = 'hard-light';\n        array[BLEND_MODES.SOFT_LIGHT] = 'soft-light';\n        array[BLEND_MODES.DIFFERENCE] = 'difference';\n        array[BLEND_MODES.EXCLUSION] = 'exclusion';\n        array[BLEND_MODES.HUE] = 'hue';\n        array[BLEND_MODES.SATURATION] = 'saturate';\n        array[BLEND_MODES.COLOR] = 'color';\n        array[BLEND_MODES.LUMINOSITY] = 'luminosity';\n    }\n    else\n    {\n        // this means that the browser does not support the cool new blend modes in canvas 'cough' ie 'cough'\n        array[BLEND_MODES.NORMAL] = 'source-over';\n        array[BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???\n        array[BLEND_MODES.MULTIPLY] = 'source-over';\n        array[BLEND_MODES.SCREEN] = 'source-over';\n        array[BLEND_MODES.OVERLAY] = 'source-over';\n        array[BLEND_MODES.DARKEN] = 'source-over';\n        array[BLEND_MODES.LIGHTEN] = 'source-over';\n        array[BLEND_MODES.COLOR_DODGE] = 'source-over';\n        array[BLEND_MODES.COLOR_BURN] = 'source-over';\n        array[BLEND_MODES.HARD_LIGHT] = 'source-over';\n        array[BLEND_MODES.SOFT_LIGHT] = 'source-over';\n        array[BLEND_MODES.DIFFERENCE] = 'source-over';\n        array[BLEND_MODES.EXCLUSION] = 'source-over';\n        array[BLEND_MODES.HUE] = 'source-over';\n        array[BLEND_MODES.SATURATION] = 'source-over';\n        array[BLEND_MODES.COLOR] = 'source-over';\n        array[BLEND_MODES.LUMINOSITY] = 'source-over';\n    }\n    // not-premultiplied, only for webgl\n    array[BLEND_MODES.NORMAL_NPM] = array[BLEND_MODES.NORMAL];\n    array[BLEND_MODES.ADD_NPM] = array[BLEND_MODES.ADD];\n    array[BLEND_MODES.SCREEN_NPM] = array[BLEND_MODES.SCREEN];\n\n    // composite operations\n    array[BLEND_MODES.SRC_IN] = 'source-in';\n    array[BLEND_MODES.SRC_OUT] = 'source-out';\n    array[BLEND_MODES.SRC_ATOP] = 'source-atop';\n    array[BLEND_MODES.DST_OVER] = 'destination-over';\n    array[BLEND_MODES.DST_IN] = 'destination-in';\n    array[BLEND_MODES.DST_OUT] = 'destination-out';\n    array[BLEND_MODES.DST_ATOP] = 'destination-atop';\n    array[BLEND_MODES.XOR] = 'xor';\n\n    // SUBTRACT from flash, does not exist in canvas\n    array[BLEND_MODES.SUBTRACT] = 'source-over';\n\n    return array;\n}\n","import { AbstractRenderer, resources } from '@pixi/core';\nimport { CanvasRenderTarget, sayHello } from '@pixi/utils';\nimport { CanvasMaskManager } from './utils/CanvasMaskManager';\nimport { mapCanvasBlendModesToPixi } from './utils/mapCanvasBlendModesToPixi';\nimport { RENDERER_TYPE, SCALE_MODES, BLEND_MODES } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\n\n/**\n * The CanvasRenderer draws the scene and all its content onto a 2d canvas.\n *\n * This renderer should be used for browsers that do not support WebGL.\n * Don't forget to add the CanvasRenderer.view to your DOM or you will not see anything!\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.AbstractRenderer\n */\nexport class CanvasRenderer extends AbstractRenderer\n{\n    /**\n     * @param {object} [options] - The optional renderer parameters\n     * @param {number} [options.width=800] - the width of the screen\n     * @param {number} [options.height=600] - the height of the screen\n     * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional\n     * @param {boolean} [options.transparent=false] - If the render view is transparent, default false\n     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n     *   resolutions other than 1\n     * @param {boolean} [options.antialias=false] - sets antialias\n     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer. The\n     *  resolution of the renderer retina would be 2.\n     * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation,\n     *  enable this if you need to call toDataUrl on the webgl context.\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n     *      not before the new render pass.\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent).\n     */\n    constructor(options, arg2, arg3)\n    {\n        super('Canvas', options, arg2, arg3);\n\n        this.type = RENDERER_TYPE.CANVAS;\n\n        /**\n         * The root canvas 2d context that everything is drawn with.\n         *\n         * @member {CanvasRenderingContext2D}\n         */\n        this.rootContext = this.view.getContext('2d', { alpha: this.transparent });\n\n        /**\n         * The currently active canvas 2d context (could change with renderTextures)\n         *\n         * @member {CanvasRenderingContext2D}\n         */\n        this.context = this.rootContext;\n\n        /**\n         * Boolean flag controlling canvas refresh.\n         *\n         * @member {boolean}\n         */\n        this.refresh = true;\n\n        /**\n         * Instance of a CanvasMaskManager, handles masking when using the canvas renderer.\n         *\n         * @member {PIXI.CanvasMaskManager}\n         */\n        this.maskManager = new CanvasMaskManager(this);\n\n        /**\n         * The canvas property used to set the canvas smoothing property.\n         *\n         * @member {string}\n         */\n        this.smoothProperty = 'imageSmoothingEnabled';\n\n        if (!this.rootContext.imageSmoothingEnabled)\n        {\n            if (this.rootContext.webkitImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'webkitImageSmoothingEnabled';\n            }\n            else if (this.rootContext.mozImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'mozImageSmoothingEnabled';\n            }\n            else if (this.rootContext.oImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'oImageSmoothingEnabled';\n            }\n            else if (this.rootContext.msImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'msImageSmoothingEnabled';\n            }\n        }\n\n        this.initPlugins(CanvasRenderer.__plugins);\n\n        /**\n         * Tracks the blend modes useful for this renderer.\n         *\n         * @member {object<number, string>}\n         */\n        this.blendModes = mapCanvasBlendModesToPixi();\n        this._activeBlendMode = null;\n        this._outerBlend = false;\n\n        this.renderingToScreen = false;\n\n        sayHello('Canvas');\n\n        /**\n         * Fired after rendering finishes.\n         *\n         * @event PIXI.CanvasRenderer#postrender\n         */\n\n        /**\n         * Fired before rendering starts.\n         *\n         * @event PIXI.CanvasRenderer#prerender\n         */\n\n        this.resize(this.options.width, this.options.height);\n    }\n\n    /**\n     * Renders the object to this canvas view\n     *\n     * @param {PIXI.DisplayObject} displayObject - The object to be rendered\n     * @param {PIXI.RenderTexture} [renderTexture] - A render texture to be rendered to.\n     *  If unset, it will render to the root context.\n     * @param {boolean} [clear=false] - Whether to clear the canvas before drawing\n     * @param {PIXI.Matrix} [transform] - A transformation to be applied\n     * @param {boolean} [skipUpdateTransform=false] - Whether to skip the update transform\n     */\n    render(displayObject, renderTexture, clear, transform, skipUpdateTransform)\n    {\n        if (!this.view)\n        {\n            return;\n        }\n\n        // can be handy to know!\n        this.renderingToScreen = !renderTexture;\n\n        this.emit('prerender');\n\n        const rootResolution = this.resolution;\n\n        if (renderTexture)\n        {\n            renderTexture = renderTexture.baseTexture || renderTexture;\n\n            if (!renderTexture._canvasRenderTarget)\n            {\n                renderTexture._canvasRenderTarget = new CanvasRenderTarget(\n                    renderTexture.width,\n                    renderTexture.height,\n                    renderTexture.resolution\n                );\n                renderTexture.resource = new resources.CanvasResource(renderTexture._canvasRenderTarget.canvas);\n                renderTexture.valid = true;\n            }\n\n            this.context = renderTexture._canvasRenderTarget.context;\n            this.resolution = renderTexture._canvasRenderTarget.resolution;\n        }\n        else\n        {\n            this.context = this.rootContext;\n        }\n\n        const context = this.context;\n\n        if (!renderTexture)\n        {\n            this._lastObjectRendered = displayObject;\n        }\n\n        if (!skipUpdateTransform)\n        {\n            // update the scene graph\n            const cacheParent = displayObject.parent;\n            const tempWt = this._tempDisplayObjectParent.transform.worldTransform;\n\n            if (transform)\n            {\n                transform.copyTo(tempWt);\n                // Canvas Renderer doesn't use \"context.translate\"\n                // nor does it store current translation in projectionSystem\n                // we re-calculate all matrices,\n                // its not like CanvasRenderer can survive more than 1000 elements\n                displayObject.transform._parentID = -1;\n            }\n            else\n            {\n                // in this case matrix cache in displayObject works like expected\n                tempWt.identity();\n            }\n\n            displayObject.parent = this._tempDisplayObjectParent;\n\n            displayObject.updateTransform();\n            displayObject.parent = cacheParent;\n            if (transform)\n            {\n                // Clear the matrix cache one more time,\n                // we dont have our computations to affect standard \"transform=null\" case\n                displayObject.transform._parentID = -1;\n            }\n            // displayObject.hitArea = //TODO add a temp hit area\n        }\n\n        context.save();\n        context.setTransform(1, 0, 0, 1, 0, 0);\n        context.globalAlpha = 1;\n        this._activeBlendMode = BLEND_MODES.NORMAL;\n        this._outerBlend = false;\n        context.globalCompositeOperation = this.blendModes[BLEND_MODES.NORMAL];\n\n        if (clear !== undefined ? clear : this.clearBeforeRender)\n        {\n            if (this.renderingToScreen)\n            {\n                if (this.transparent)\n                {\n                    context.clearRect(0, 0, this.width, this.height);\n                }\n                else\n                {\n                    context.fillStyle = this._backgroundColorString;\n                    context.fillRect(0, 0, this.width, this.height);\n                }\n            } // else {\n            // TODO: implement background for CanvasRenderTarget or RenderTexture?\n            // }\n        }\n\n        // TODO RENDER TARGET STUFF HERE..\n        const tempContext = this.context;\n\n        this.context = context;\n        displayObject.renderCanvas(this);\n        this.context = tempContext;\n\n        context.restore();\n\n        this.resolution = rootResolution;\n\n        this.emit('postrender');\n    }\n\n    /**\n     * Clear the canvas of renderer.\n     *\n     * @param {string} [clearColor] - Clear the canvas with this color, except the canvas is transparent.\n     */\n    clear(clearColor)\n    {\n        const context = this.context;\n\n        clearColor = clearColor || this._backgroundColorString;\n\n        if (!this.transparent && clearColor)\n        {\n            context.fillStyle = clearColor;\n            context.fillRect(0, 0, this.width, this.height);\n        }\n        else\n        {\n            context.clearRect(0, 0, this.width, this.height);\n        }\n    }\n\n    /**\n     * Sets the blend mode of the renderer.\n     *\n     * @param {number} blendMode - See {@link PIXI.BLEND_MODES} for valid values.\n     * @param {boolean} [readyForOuterBlend=false] - Some blendModes are dangerous, they affect outer space of sprite.\n     * Pass `true` only if you are ready to use them.\n     */\n    setBlendMode(blendMode, readyForOuterBlend)\n    {\n        const outerBlend = blendMode === BLEND_MODES.SRC_IN\n            || blendMode === BLEND_MODES.SRC_OUT\n            || blendMode === BLEND_MODES.DST_IN\n            || blendMode === BLEND_MODES.DST_ATOP;\n\n        if (!readyForOuterBlend && outerBlend)\n        {\n            blendMode = BLEND_MODES.NORMAL;\n        }\n\n        if (this._activeBlendMode === blendMode)\n        {\n            return;\n        }\n\n        this._activeBlendMode = blendMode;\n        this._outerBlend = outerBlend;\n        this.context.globalCompositeOperation = this.blendModes[blendMode];\n    }\n\n    /**\n     * Removes everything from the renderer and optionally removes the Canvas DOM element.\n     *\n     * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n     */\n    destroy(removeView)\n    {\n        // call the base destroy\n        super.destroy(removeView);\n\n        this.context = null;\n\n        this.refresh = true;\n\n        this.maskManager.destroy();\n        this.maskManager = null;\n\n        this.smoothProperty = null;\n    }\n\n    /**\n     * Resizes the canvas view to the specified width and height.\n     *\n     * @extends PIXI.AbstractRenderer#resize\n     *\n     * @param {number} screenWidth - the new width of the screen\n     * @param {number} screenHeight - the new height of the screen\n     */\n    resize(screenWidth, screenHeight)\n    {\n        super.resize(screenWidth, screenHeight);\n\n        // reset the scale mode.. oddly this seems to be reset when the canvas is resized.\n        // surely a browser bug?? Let PixiJS fix that for you..\n        if (this.smoothProperty)\n        {\n            this.rootContext[this.smoothProperty] = (settings.SCALE_MODE === SCALE_MODES.LINEAR);\n        }\n    }\n\n    /**\n     * Checks if blend mode has changed.\n     */\n    invalidateBlendMode()\n    {\n        this._activeBlendMode = this.blendModes.indexOf(this.context.globalCompositeOperation);\n    }\n\n    /**\n     * Collection of installed plugins. These are included by default in PIXI, but can be excluded\n     * by creating a custom build. Consult the README for more information about creating custom\n     * builds and excluding plugins.\n     * @name PIXI.CanvasRenderer#plugins\n     * @type {object}\n     * @readonly\n     * @property {PIXI.accessibility.AccessibilityManager} accessibility Support tabbing interactive elements.\n     * @property {PIXI.extract.CanvasExtract} extract Extract image data from renderer.\n     * @property {PIXI.interaction.InteractionManager} interaction Handles mouse, touch and pointer events.\n     * @property {PIXI.prepare.CanvasPrepare} prepare Pre-render display objects.\n     */\n\n    /**\n     * Adds a plugin to the renderer.\n     *\n     * @method\n     * @param {string} pluginName - The name of the plugin.\n     * @param {Function} ctor - The constructor function or class for the plugin.\n     */\n    static registerPlugin(pluginName, ctor)\n    {\n        CanvasRenderer.__plugins = CanvasRenderer.__plugins || {};\n        CanvasRenderer.__plugins[pluginName] = ctor;\n    }\n}\n","import { hex2rgb, rgb2hex } from '@pixi/utils';\nimport { canUseNewCanvasBlendModes } from './utils/canUseNewCanvasBlendModes';\n\n/**\n * Utility methods for Sprite/Texture tinting.\n *\n * Tinting with the CanvasRenderer involves creating a new canvas to use as a texture,\n * so be aware of the performance implications.\n *\n * @namespace PIXI.canvasUtils\n * @memberof PIXI\n */\nexport const canvasUtils = {\n    /**\n     * Basically this method just needs a sprite and a color and tints the sprite with the given color.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Sprite} sprite - the sprite to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @return {HTMLCanvasElement} The tinted canvas\n     */\n    getTintedCanvas: (sprite, color) =>\n    {\n        const texture = sprite.texture;\n\n        color = canvasUtils.roundColor(color);\n\n        const stringColor = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n\n        texture.tintCache = texture.tintCache || {};\n\n        const cachedCanvas = texture.tintCache[stringColor];\n\n        let canvas;\n\n        if (cachedCanvas)\n        {\n            if (cachedCanvas.tintId === texture._updateID)\n            {\n                return texture.tintCache[stringColor];\n            }\n\n            canvas = texture.tintCache[stringColor];\n        }\n        else\n        {\n            canvas = canvasUtils.canvas || document.createElement('canvas');\n        }\n\n        canvasUtils.tintMethod(texture, color, canvas);\n\n        canvas.tintId = texture._updateID;\n\n        if (canvasUtils.convertTintToImage)\n        {\n            // is this better?\n            const tintImage = new Image();\n\n            tintImage.src = canvas.toDataURL();\n\n            texture.tintCache[stringColor] = tintImage;\n        }\n        else\n        {\n            texture.tintCache[stringColor] = canvas;\n            // if we are not converting the texture to an image then we need to lose the reference to the canvas\n            canvasUtils.canvas = null;\n        }\n\n        return canvas;\n    },\n\n    /**\n     * Tint a texture using the 'multiply' operation.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithMultiply: (texture, color, canvas) =>\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.fillStyle = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n\n        context.fillRect(0, 0, crop.width, crop.height);\n\n        context.globalCompositeOperation = 'multiply';\n\n        const source = texture.baseTexture.getDrawableSource();\n\n        context.drawImage(\n            source,\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n\n        context.globalCompositeOperation = 'destination-atop';\n\n        context.drawImage(\n            source,\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n        context.restore();\n    },\n\n    /**\n     * Tint a texture using the 'overlay' operation.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithOverlay(texture, color, canvas)\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.globalCompositeOperation = 'copy';\n        context.fillStyle = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n        context.fillRect(0, 0, crop.width, crop.height);\n\n        context.globalCompositeOperation = 'destination-atop';\n        context.drawImage(\n            texture.baseTexture.getDrawableSource(),\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n\n        // context.globalCompositeOperation = 'copy';\n        context.restore();\n    },\n\n    /**\n     * Tint a texture pixel per pixel.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithPerPixel: (texture, color, canvas) =>\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.globalCompositeOperation = 'copy';\n        context.drawImage(\n            texture.baseTexture.getDrawableSource(),\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n        context.restore();\n\n        const rgbValues = hex2rgb(color);\n        const r = rgbValues[0];\n        const g = rgbValues[1];\n        const b = rgbValues[2];\n\n        const pixelData = context.getImageData(0, 0, crop.width, crop.height);\n\n        const pixels = pixelData.data;\n\n        for (let i = 0; i < pixels.length; i += 4)\n        {\n            pixels[i + 0] *= r;\n            pixels[i + 1] *= g;\n            pixels[i + 2] *= b;\n        }\n\n        context.putImageData(pixelData, 0, 0);\n    },\n\n    /**\n     * Rounds the specified color according to the canvasUtils.cacheStepsPerColorChannel.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {number} color - the color to round, should be a hex color\n     * @return {number} The rounded color.\n     */\n    roundColor: (color) =>\n    {\n        const step = canvasUtils.cacheStepsPerColorChannel;\n\n        const rgbValues = hex2rgb(color);\n\n        rgbValues[0] = Math.min(255, (rgbValues[0] / step) * step);\n        rgbValues[1] = Math.min(255, (rgbValues[1] / step) * step);\n        rgbValues[2] = Math.min(255, (rgbValues[2] / step) * step);\n\n        return rgb2hex(rgbValues);\n    },\n\n    /**\n     * Number of steps which will be used as a cap when rounding colors.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {number}\n     */\n    cacheStepsPerColorChannel: 8,\n\n    /**\n     * Tint cache boolean flag.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {boolean}\n     */\n    convertTintToImage: false,\n\n    /**\n     * Whether or not the Canvas BlendModes are supported, consequently the ability to tint using the multiply method.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {boolean}\n     */\n    canUseMultiply: canUseNewCanvasBlendModes(),\n\n    /**\n     * The tinting method that will be used.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {Function}\n     */\n    tintMethod: () =>\n    { // jslint-disable no-empty-function\n\n    },\n};\n\ncanvasUtils.tintMethod = canvasUtils.canUseMultiply ? canvasUtils.tintWithMultiply : canvasUtils.tintWithPerPixel;\n","import { Renderer } from '@pixi/core';\nimport { CanvasRenderer } from './CanvasRenderer';\n\n// Reference to Renderer.create static function\nconst parentCreate = Renderer.create;\n\n/**\n * Override the Renderer.create to fallback to use CanvasRenderer.\n * Also supports forceCanvas option with Application or autoDetectRenderer.\n * @private\n */\nRenderer.create = function create(options)\n{\n    const forceCanvas = options && options.forceCanvas;\n\n    if (!forceCanvas)\n    {\n        try\n        {\n            return parentCreate(options);\n        }\n        catch (err)\n        {\n            // swallow WebGL-unsupported error\n        }\n    }\n\n    return new CanvasRenderer(options);\n};\n","import { BaseTexture } from '@pixi/core';\n\n/**\n * Get the drawable source, such as HTMLCanvasElement or HTMLImageElement suitable\n * for rendering with CanvasRenderer. Provided by **@pixi/canvas-renderer** package.\n * @method getDrawableSource\n * @memberof PIXI.BaseTexture#\n * @return {PIXI.ICanvasImageSource} Source to render with CanvasRenderer\n */\nBaseTexture.prototype.getDrawableSource = function getDrawableSource()\n{\n    const resource = this.resource;\n\n    return resource ? (resource.bitmap || resource.source) : this.source;\n};\n"]},"metadata":{},"sourceType":"module"}