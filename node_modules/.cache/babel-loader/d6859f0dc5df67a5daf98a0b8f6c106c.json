{"ast":null,"code":"/*!\n * @pixi/canvas-extract - v5.2.0\n * Compiled Wed, 06 Nov 2019 02:32:43 UTC\n *\n * @pixi/canvas-extract is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { RenderTexture } from '@pixi/core';\nimport { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nvar TEMP_RECT = new Rectangle();\n/**\n * The extract manager provides functionality to export content from the renderers.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.extract`\n *\n * @class\n * @memberof PIXI.extract\n */\n\nvar CanvasExtract = function CanvasExtract(renderer) {\n  this.renderer = renderer;\n  /**\n   * Collection of methods for extracting data (image, pixels, etc.) from a display object or render texture\n   *\n   * @member {PIXI.extract.CanvasExtract} extract\n   * @memberof PIXI.CanvasRenderer#\n   * @see PIXI.extract.CanvasExtract\n   */\n\n  renderer.extract = this;\n};\n/**\n * Will return a HTML Image of the target\n *\n * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n *  to convert. If left empty will use the main renderer\n * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n * @return {HTMLImageElement} HTML Image of the target\n */\n\n\nCanvasExtract.prototype.image = function image(target, format, quality) {\n  var image = new Image();\n  image.src = this.base64(target, format, quality);\n  return image;\n};\n/**\n * Will return a a base64 encoded string of this target. It works by calling\n *  `CanvasExtract.getCanvas` and then running toDataURL on that.\n *\n * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n *  to convert. If left empty will use the main renderer\n * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n * @return {string} A base64 encoded string of the texture.\n */\n\n\nCanvasExtract.prototype.base64 = function base64(target, format, quality) {\n  return this.canvas(target).toDataURL(format, quality);\n};\n/**\n * Creates a Canvas element, renders this target to it and then returns it.\n *\n * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n *  to convert. If left empty will use the main renderer\n * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.\n */\n\n\nCanvasExtract.prototype.canvas = function canvas(target) {\n  var renderer = this.renderer;\n  var context;\n  var resolution;\n  var frame;\n  var renderTexture;\n\n  if (target) {\n    if (target instanceof RenderTexture) {\n      renderTexture = target;\n    } else {\n      renderTexture = renderer.generateTexture(target);\n    }\n  }\n\n  if (renderTexture) {\n    context = renderTexture.baseTexture._canvasRenderTarget.context;\n    resolution = renderTexture.baseTexture._canvasRenderTarget.resolution;\n    frame = renderTexture.frame;\n  } else {\n    context = renderer.rootContext;\n    resolution = renderer.resolution;\n    frame = TEMP_RECT;\n    frame.width = this.renderer.width;\n    frame.height = this.renderer.height;\n  }\n\n  var width = Math.floor(frame.width * resolution + 1e-4);\n  var height = Math.floor(frame.height * resolution + 1e-4);\n  var canvasBuffer = new CanvasRenderTarget(width, height, 1);\n  var canvasData = context.getImageData(frame.x * resolution, frame.y * resolution, width, height);\n  canvasBuffer.context.putImageData(canvasData, 0, 0); // send the canvas back..\n\n  return canvasBuffer.canvas;\n};\n/**\n * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n * order, with integer values between 0 and 255 (included).\n *\n * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n *  to convert. If left empty will use the main renderer\n * @return {Uint8ClampedArray} One-dimensional array containing the pixel data of the entire texture\n */\n\n\nCanvasExtract.prototype.pixels = function pixels(target) {\n  var renderer = this.renderer;\n  var context;\n  var resolution;\n  var frame;\n  var renderTexture;\n\n  if (target) {\n    if (target instanceof RenderTexture) {\n      renderTexture = target;\n    } else {\n      renderTexture = renderer.generateTexture(target);\n    }\n  }\n\n  if (renderTexture) {\n    context = renderTexture.baseTexture._canvasRenderTarget.context;\n    resolution = renderTexture.baseTexture._canvasRenderTarget.resolution;\n    frame = renderTexture.frame;\n  } else {\n    context = renderer.rootContext;\n    frame = TEMP_RECT;\n    frame.width = renderer.width;\n    frame.height = renderer.height;\n  }\n\n  return context.getImageData(0, 0, frame.width * resolution, frame.height * resolution).data;\n};\n/**\n * Destroys the extract\n *\n */\n\n\nCanvasExtract.prototype.destroy = function destroy() {\n  this.renderer.extract = null;\n  this.renderer = null;\n};\n\nexport { CanvasExtract };","map":{"version":3,"sources":["../src/CanvasExtract.js"],"names":["const"],"mappings":"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","sourcesContent":["import { RenderTexture } from '@pixi/core';\nimport { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\n\nconst TEMP_RECT = new Rectangle();\n\n/**\n * The extract manager provides functionality to export content from the renderers.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.extract`\n *\n * @class\n * @memberof PIXI.extract\n */\nexport class CanvasExtract\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n        /**\n         * Collection of methods for extracting data (image, pixels, etc.) from a display object or render texture\n         *\n         * @member {PIXI.extract.CanvasExtract} extract\n         * @memberof PIXI.CanvasRenderer#\n         * @see PIXI.extract.CanvasExtract\n         */\n        renderer.extract = this;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return {HTMLImageElement} HTML Image of the target\n     */\n    image(target, format, quality)\n    {\n        const image = new Image();\n\n        image.src = this.base64(target, format, quality);\n\n        return image;\n    }\n\n    /**\n     * Will return a a base64 encoded string of this target. It works by calling\n     *  `CanvasExtract.getCanvas` and then running toDataURL on that.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return {string} A base64 encoded string of the texture.\n     */\n    base64(target, format, quality)\n    {\n        return this.canvas(target).toDataURL(format, quality);\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.\n     */\n    canvas(target)\n    {\n        const renderer = this.renderer;\n        let context;\n        let resolution;\n        let frame;\n        let renderTexture;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target);\n            }\n        }\n\n        if (renderTexture)\n        {\n            context = renderTexture.baseTexture._canvasRenderTarget.context;\n            resolution = renderTexture.baseTexture._canvasRenderTarget.resolution;\n            frame = renderTexture.frame;\n        }\n        else\n        {\n            context = renderer.rootContext;\n            resolution = renderer.resolution;\n            frame = TEMP_RECT;\n            frame.width = this.renderer.width;\n            frame.height = this.renderer.height;\n        }\n\n        const width = Math.floor((frame.width * resolution) + 1e-4);\n        const height = Math.floor((frame.height * resolution) + 1e-4);\n\n        const canvasBuffer = new CanvasRenderTarget(width, height, 1);\n        const canvasData = context.getImageData(frame.x * resolution, frame.y * resolution, width, height);\n\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n        // send the canvas back..\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return {Uint8ClampedArray} One-dimensional array containing the pixel data of the entire texture\n     */\n    pixels(target)\n    {\n        const renderer = this.renderer;\n        let context;\n        let resolution;\n        let frame;\n        let renderTexture;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target);\n            }\n        }\n\n        if (renderTexture)\n        {\n            context = renderTexture.baseTexture._canvasRenderTarget.context;\n            resolution = renderTexture.baseTexture._canvasRenderTarget.resolution;\n            frame = renderTexture.frame;\n        }\n        else\n        {\n            context = renderer.rootContext;\n\n            frame = TEMP_RECT;\n            frame.width = renderer.width;\n            frame.height = renderer.height;\n        }\n\n        return context.getImageData(0, 0, frame.width * resolution, frame.height * resolution).data;\n    }\n\n    /**\n     * Destroys the extract\n     *\n     */\n    destroy()\n    {\n        this.renderer.extract = null;\n        this.renderer = null;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}